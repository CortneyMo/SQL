# For this project, I downloaded Spotify top 50 songs in 2021 data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I ranked the artists and their songs based on thier popularity

SELECT artist_name, track_name, ROW_NUMBER() OVER (ORDER BY popularity DESC) AS rank FROM Spotifydata;

# Then I found the TOP 5 liveliest songs.

SELECT track_name, liveness FROM BIT_DB.Spotifydata 
ORDER BY liveness DESC
LIMIT 5;

# After I identifies the least danceable song.

SELECT track_name, MIN(danceabilty) FROM BIT_DB.Spotifydata; 

# Which artists have more than 2 songs on the list?

SELECT artist_name, COUNT(artist_name) AS NumOfSongs 
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING NumOfSongs > 2;

# How long is this spotify playlist
SELECT SUM(duration_ms) FROM BIT_DB.Spotifydata;

# Which songs has 'You' in the title and how long are those songs in mintues?

SELECT track_name, (duration_ms/60000) AS Minutes_played, duration_ms 
FROM Spotifydata
WHERE track_name LIKE '%you%';

# What is the average danceability, energy, loudness, liveness, duration, and tempo of the songs recorded
SELECT
        AVG(energy), 
        AVG(loudness), 
        AVG(liveness), 
        AVG(duration_ms), 
        AVG(tempo)
FROM Spotifydata;

# Which songs are above the average danceability, energy, loudness, liveness, duration, and tempo, How popular are those songs, what is their ranking

##creating a CTE rank songs 
  WITH Song_ranking AS (
                        SELECT *, ROW_NUMBER() OVER (ORDER BY popularity DESC) AS rank FROM Spotifydata
                        )
  SELECT track_name, rank, popularity
    FROM Song_ranking

###Using Subqueries to Filter for songa above average

  WHERE 
    danceability > (SELECT AVG(danceability) FROM Song_ranking)  
        AND energy > (SELECT AVG(energy) FROM Song_ranking) 
        AND loudness > (SELECT AVG(loudness) FROM Song_ranking) 
        AND liveness > (SELECT AVG(liveness) FROM Song_ranking)
        AND duration_ms > (SELECT AVG(duration_ms) FROM Song_ranking)
        AND tempo > (SELECT AVG(tempo) FROM Song_ranking)
  GROUP BY track_name;


--Which songs are below the average danceability, energy, loudness, liveness, duration, and tempo, How popular are those songs, what is their ranking

##Using the same method but changing the filter
  WITH Song_ranking AS (
                        SELECT *, ROW_NUMBER() OVER (ORDER BY popularity DESC) AS rank FROM Spotifydata
                        )
  SELECT track_name, rank, popularity
      FROM Song_ranking
  `WHERE 
    danceability < (SELECT AVG(danceability) FROM Song_ranking)  
        AND energy < (SELECT AVG(energy) FROM Song_ranking) 
        AND loudness < (SELECT AVG(loudness) FROM Song_ranking) 
        AND liveness < (SELECT AVG(liveness) FROM Song_ranking)
        AND duration_ms < (SELECT AVG(duration_ms) FROM Song_ranking)
        AND tempo < (SELECT AVG(tempo) FROM Song_ranking)
GROUP BY track_name;
